
import Huffman.AlberoBinario;
import Huffman.Carattere;
import Huffman.FrequenzaComparator;
import Huffman.Leggi;
import Huffman.NodoAlberoBinario;
import java.awt.Component;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.File;
import java.io.Reader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.Writer;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Saverio
 */
public class Huffman_Morelli_Papapietro extends javax.swing.JFrame {

    /**
     * Creates new form Huffman_Morelli_Papapietro
     */
    public Huffman_Morelli_Papapietro() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jFrame2 = new javax.swing.JFrame();
        jFrame3 = new javax.swing.JFrame();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HUFFMAN - COMPRIMI E DECOMPRIMI UN FILE - MORELLI / PAPAPIETRO");
        setLocation(new java.awt.Point(10, 10));
        setResizable(false);

        jButton1.setText("COMPRIMI FILE");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("DECOMPRIMI FILE");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("SFOGLIA...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jLabel1.setText("Nome File (Origine):");

        jLabel2.setText("Percorso File:");

        jTextField2.setEnabled(false);
        jTextField2.setName(""); // NOI18N

        jLabel4.setText("Nome File (Destinazione):");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setText("--");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("--");

        jLabel7.setText("Estensione File:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 204));
        jLabel8.setText("--");

        jLabel10.setText("_compresso.txt / _decompresso.txt");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel10.getAccessibleContext().setAccessibleName("");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 204));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setToolTipText("");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 0, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("ATTENZIONE: IL PROGRAMMA NON FUNZIONA CORRETTAMENTE CON FILE CONTENENTI I SEGUENTI CARATTERI:");
        jLabel11.setToolTipText("");
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 0, 0));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText(". + \\ * ? ( ) [ ] { } ^ $ | 0 1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(57, 57, 57)
                .addComponent(jLabel3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(23, 23, 23)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            // gets string from JTextField using the loadWebPage method
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setSelectedFile(new File(""));
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            chooser.setAcceptAllFileFilterUsed(false);
            FileFilter filter = new FileNameExtensionFilter("TXT File","txt");
            chooser.addChoosableFileFilter(filter);
            Component frame=null;
            if (chooser.showOpenDialog(frame) == JFileChooser.OPEN_DIALOG)
            {
                //do when open
                jTextField1.setText(chooser.getSelectedFile().getPath());
                jLabel5.setText(chooser.getSelectedFile().getName().replace(".txt", ""));
                jLabel8.setText(".txt");//è solamente dimostrativo, in quanto è possibile aprire solo file txt
                jLabel6.setText(chooser.getSelectedFile().getParent()+"\\");
                jTextField2.setEnabled(true);
                jTextField2.setText(jLabel5.getText()+"");
                //File path=new File(chooser.getSelectedFile().getParent()+"\\"+jLabel5.getText().replace(".txt", "")+"_carfreq.!txt");
                //EFFETTUA IL CONTROLLO SE ESISTE GIA' UN FILE "getname()"_compresso.txt && "getname()"_carfreq.!txt
                if(new File(chooser.getSelectedFile().getParent()+"\\"+jLabel5.getText().replace(".txt", "")+"_carfreq.!txt").exists())
                {
                    //se il file si chiama NOMEFILE_compresso significa che è un file già compresso, quindi viene abilitato solo il tasto di DECOMPRESSIONE
                    if(!jLabel5.getText().contains("_compresso"))
                    {
                        jButton1.setEnabled(true);
                        jButton2.setEnabled(false);
                    }
                    else
                    {
                        jTextField2.setText(jTextField2.getText().replace("_compresso", ""));
                        jButton1.setEnabled(false);
                        jButton2.setEnabled(true);
                    }
                }else
                {
                    jButton1.setEnabled(true);
                    jButton2.setEnabled(false);
                }
            } else {
                // do when cancel
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            jProgressBar1.setValue(25);
            // TODO add your handling code here:
            jLabel9.setText("COMPRESSIONE AVVIATA...");
            jTextField1.setEnabled(false);
            jTextField2.setEnabled(false);
            jButton3.setEnabled(false);
            comprimi();
            jTextField1.setEnabled(true);
            jTextField2.setEnabled(true);
            jButton3.setEnabled(true);
        }catch(FileNotFoundException ex)
        {
            //Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 001 - COMPRESSIONE");
            jLabel9.setText("ERROR 001 - COMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }catch(Error ex)
        {
            //Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 002 - COMPRESSIONE");
            jLabel9.setText("ERROR 002 - COMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }catch(NullPointerException ex)
        {
            //Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 003 - COMPRESSIONE");
            jLabel9.setText("ERROR 003 - COMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }catch(Exception ex)
        {
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 004 - COMPRESSIONE");
            jLabel9.setText("ERROR 004 - COMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            jProgressBar1.setValue(25);
            jLabel9.setText("DECOMPRESSIONE AVVIATA...");
            jTextField1.setEnabled(false);
            jTextField2.setEnabled(false);
            jButton3.setEnabled(false);
            decomprimi();
            jTextField1.setEnabled(true);
            jTextField2.setEnabled(true);
            jButton3.setEnabled(true);
        }catch(FileNotFoundException ex)
        {
            //Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 005 - DECOMPRESSIONE");
            jLabel9.setText("ERROR 005 - DECOMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }catch(Error ex)
        {
            //Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 006 - DECOMPRESSIONE");
            jLabel9.setText("ERROR 006 - DECOMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }catch(NullPointerException ex)
        {
            //Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 007 - DECOMPRESSIONE");
            jLabel9.setText("ERROR 007 - DECOMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }catch(Exception ex)
        {
            System.err.println("ERRORE NON GESTITO. PER FAVORE, RIAVVIA IL PROGRAMMA E RIPROVA.\nERROR CODE: 008 - DECOMPRESSIONE");
            jLabel9.setText("ERROR 008 - DECOMPRESSIONE");
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
            jButton3.setEnabled(true);
            jTextField1.setEnabled(true);
            jProgressBar1.setValue(100);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Huffman_Morelli_Papapietro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Huffman_Morelli_Papapietro().setVisible(true);
            }
        });
        
    }
    
    private void comprimi() throws IOException
    {
        //System.out.println("\n-------------------------------------\nCOMPRESSIONE:\n--------------------------------------\n");
        //COMPRESSIONE FILE
        
        Leggi l = new Leggi();
        AlberoBinario albero = new AlberoBinario();
        ArrayList<NodoAlberoBinario> array=new ArrayList<>();
        HashMap caratteri_hm=new HashMap();
        HashMap hm=new HashMap();
        jProgressBar1.setValue(30);
        try(FileReader file = new FileReader(jLabel6.getText()+jLabel5.getText()+".txt"))
        {
            int x=file.read();//carattere
            while(x!=-1)
            {
                boolean inserito=false;
                for(int i=0;i<array.size()&&!inserito&&!array.isEmpty();i++)
                {
                    if(array.get(i).getInf().getCarattere()==x)
                    {
                        array.get(i).getInf().incFrequenza();
                        inserito=true;
                    }
                }
                if(array.isEmpty() || !inserito)
                {
                    Carattere car=new Carattere((char)x);
                    NodoAlberoBinario n=new NodoAlberoBinario(car);
                    array.add(n);
                    caratteri_hm.put(caratteri_hm.size(), (char)x);
                }
                x=file.read();
            }
        } //carattere
        
        Collections.sort(array,new FrequenzaComparator());//ordinamento crescente
        
        //crea il file contenente la frequenza ed i caratteri
        jProgressBar1.setValue(40);
        try (FileWriter file_carfreq = new FileWriter(jLabel6.getText()+jLabel5.getText()+"_carfreq.!txt"))
        {
            for(int i=0;i<array.size();i++)
            {
                file_carfreq.write((int)array.get(i).getInf().getCarattere() + " " + array.get(i).getInf().getFrequenza() + "\n");
            }
            file_carfreq.close();
        }
        
        boolean termina=false;
        while(array.size()>=2 && !termina)
        {
            if(array.size()==2)
            {
                Collections.sort(array,new FrequenzaComparator());//ordinamento crescente
                NodoAlberoBinario sx = array.get(0);
                NodoAlberoBinario dx = array.get(1);
                NodoAlberoBinario n = new NodoAlberoBinario('^',(array.get(0).getInf().getFrequenza()+array.get(1).getInf().getFrequenza()));
                n.rootSI();
                n.setPsx(sx);
                n.setPdx(dx);
                array.remove(array.get(0));
                array.remove(array.get(0));
                array.add(n);
                albero.AggiungiNodo(n);
                Collections.sort(array,new FrequenzaComparator());//ordinamento crescente
                //System.out.println(array);
                termina=true;
            }
            else
            {
                char c='*';
                Collections.sort(array,new FrequenzaComparator());//ordinamento crescente
                NodoAlberoBinario sx = array.get(0);
                NodoAlberoBinario dx = array.get(1);
                NodoAlberoBinario n = new NodoAlberoBinario(c,(array.get(0).getInf().getFrequenza()+array.get(1).getInf().getFrequenza()));
                n.rootSI();
                n.setPsx(sx);
                n.setPdx(dx);
                array.remove(array.get(0));
                array.remove(array.get(0));
                array.add(n);
                Collections.sort(array,new FrequenzaComparator());//ordinamento crescente
                //System.out.println(array);
            }
        }
        jProgressBar1.setValue(60);
        //System.out.println("Albero:");
        albero.visitaOA(albero.getRoot(),null,null);
        hm.putAll(albero.visitaHashMap(albero.getRoot()));
        
        BufferedReader br;
        //try(FileWriter file_temp = new FileWriter("\\4^anno\\AREA DI PROGETTO\\HUFFMAN\\HUFFMAN\\src\\Huffman\\testo_temporaneo.!txt"))
        try(Writer file_temp = new BufferedWriter(new FileWriter(jLabel6.getText()+jLabel5.getText()+"_temp.!txt")))
        {
            br = new BufferedReader(new FileReader(jLabel6.getText()+jLabel5.getText()+".txt"));
            String linea_file="";
            Boolean primavolta=true;
            int righe=0;
            BufferedReader rbr=new BufferedReader(new FileReader(jLabel6.getText()+jLabel5.getText()+".txt"));
            while(rbr.ready())
            {
                righe++;
                rbr.readLine();
            }
            while(br.ready())
            {
                if(righe>1) if(!primavolta) file_temp.write(hm.get((char)13)+"");
                //System.out.println(hm.get((char)13)+"");
                primavolta=false;
                linea_file=br.readLine();
                for(int i=0;i<caratteri_hm.size();i++)
                {
                    /*(char)Integer.parseInt(hm.get(caratteri_hm.get(i))+"",2)*/
                    linea_file=linea_file.replaceAll(caratteri_hm.get(i)+"", hm.get(caratteri_hm.get(i))+"");
                }
                file_temp.write(linea_file);
            }
        }
        br.close();
        jProgressBar1.setValue(70);
        try(FileWriter file_compresso = new FileWriter(jLabel6.getText()+jLabel5.getText()+".!txt");FileReader file = new FileReader(jLabel6.getText()+jLabel5.getText()+"_temp.!txt"))
        {
            int x=file.read();//carattere
            String s_bit="";
            int n_bit=0,n_byte=0,n_bit_restanti=0;
            while(x!=-1)//fino a quando il file non è finito
            {
                if(n_bit<8)
                {
                    n_bit++;
                    s_bit=s_bit+""+(char)x;
                    //System.out.println(s_bit + "  " + (char)x);
                }
                
                if(n_bit==8)
                {
                    n_bit=0;
                    //System.out.println(Integer.parseInt(s_bit,2) + "    " + (char)Integer.parseInt(s_bit,2));
                    file_compresso.write((char)Integer.parseInt(s_bit,2)+"");
                    s_bit="";
                    n_byte++;
                }
                x=file.read();
            }
            if(n_bit>0)
            {
                n_bit_restanti=n_bit;
                while(n_bit<8)
                {
                    s_bit=""+s_bit;
                    n_bit++;
                }
                //System.out.println(s_bit + "  " + (char)x);
                file_compresso.write((char)Integer.parseInt(s_bit,2));
                
            }
            jProgressBar1.setValue(80);
            try (FileWriter file_carfreq = new FileWriter(jLabel6.getText()+jLabel5.getText()+"_carfreq.!txt", true);PrintWriter file_da_aggiornare=new PrintWriter(file_carfreq))
            {
                //VIENE AGGIUNTO UN . INZIALE (ALLA RIGA) E STA AD INDICARE CHE CIO' CHE SEGUE SONO IL NUMERO DEI BYTE FORMATI (DURANTE LA COMPRESSIONE)
                file_da_aggiornare.append("."+n_byte+"\n");
            }
            jProgressBar1.setValue(90);
            try (FileWriter file_carfreq = new FileWriter(jLabel6.getText()+jLabel5.getText()+"_carfreq.!txt", true);PrintWriter file_da_aggiornare=new PrintWriter(file_carfreq))
            {
                //VIENE AGGIUNTO UN - INIZIALE (ALLA RIGA) E STA AD INDICARE CHE CIO' CHE SEGUE E' L'ULTIMO BYTE INCOMPLETO, QUINDI DI NON 8 BIT
                //System.out.println(n_bit_restanti);
                file_da_aggiornare.append("-"+n_bit_restanti);
            }
        }
        
        jProgressBar1.setValue(100);
        //System.out.println("Compressione riuscita!");
        jLabel9.setText("FILE COMPRESSO CORRETTAMENTE! - IL TUO FILE SI CHIAMA: \""+jTextField2.getText()+"_compresso.txt"+"\"");
        
        new File(jLabel6.getText()+jLabel5.getText()+".!txt").renameTo(new File(jLabel6.getText()+jTextField2.getText()+"_compresso.txt"));
        new File(jLabel6.getText()+jLabel5.getText()+"_carfreq.!txt").renameTo(new File(jLabel6.getText()+jTextField2.getText()+"_compresso_carfreq.!txt"));
        new File(jLabel6.getText()+jLabel5.getText()+"_temp.!txt").delete();
        
        jLabel5.setText(jTextField2.getText()+"_compresso");
        jTextField1.setText(jLabel6.getText()+jLabel5.getText()+".txt");
        File path=new File(jLabel6.getText()+jLabel5.getText()+"_carfreq.!txt");
        
        jButton1.setEnabled(false);
        jButton2.setEnabled(true);
    }
    
    private void decomprimi() throws IOException
    {
        //System.out.println("\n-------------------------------------\nDECOMPRESSIONE:\n--------------------------------------\n");
        jLabel9.setText("DECOMPRESSIONE AVVIATA...");        
        //DECOMPRESSIONE FILE
        
        AlberoBinario albero_dec=new AlberoBinario();
        jProgressBar1.setValue(30);
        BufferedReader br_dec=new BufferedReader(new FileReader(jLabel6.getText()+jLabel5.getText()+"_carfreq.!txt"));
        HashMap hm_dec=new HashMap();
        ArrayList<NodoAlberoBinario> array_dec=new ArrayList();
        HashMap hm_dec_carfreq=new HashMap();
        String linea_file_carfreq="";
        Boolean termina=false;
        int CODICE_RESTANTE_BINARIO=0, NUMERO_BYTE_DA_8_BIT=0;
        //creazione dizionari e dell'array list
        jProgressBar1.setValue(35);
        try(FileReader file = new FileReader(jLabel6.getText()+jLabel5.getText()+".txt"))
        {
            while(br_dec.ready())
            {
                linea_file_carfreq=br_dec.readLine();
                if(!linea_file_carfreq.contains(".") && !linea_file_carfreq.contains("-"))
                {
                    int n_freq=0;
                    boolean fine_carfreq_dec=false;
                    for(int i=0;i<linea_file_carfreq.length()&&!fine_carfreq_dec;i++)
                    {
                        if(linea_file_carfreq.charAt(i)==' ')
                        {
                            fine_carfreq_dec=true;
                            n_freq=i+1;
                        }
                    }
                    char carattere=(char)Integer.parseInt(linea_file_carfreq.substring(0, n_freq-1));
                    int frequenza=Integer.parseInt(linea_file_carfreq.substring(n_freq));
                    hm_dec.put(carattere, frequenza);
                    hm_dec_carfreq.put(hm_dec_carfreq.size(), carattere);

                    Carattere car=new Carattere(carattere);
                    car.setFrequenza(frequenza);
                    NodoAlberoBinario n=new NodoAlberoBinario(car);
                    array_dec.add(n);
                }else if(linea_file_carfreq.contains("."))
                {
                    linea_file_carfreq=linea_file_carfreq.replace(".", "");
                    //System.out.println(linea_file_carfreq);
                    NUMERO_BYTE_DA_8_BIT=Integer.parseInt(linea_file_carfreq);
                    //System.out.println(CODICE_RESTANTE_BINARIO);
                }else if(linea_file_carfreq.contains("-"))
                {
                    linea_file_carfreq=linea_file_carfreq.replace("-", "");
                    //System.out.println(linea_file_carfreq);
                    CODICE_RESTANTE_BINARIO=Integer.parseInt(linea_file_carfreq);
                    //System.out.println(CODICE_RESTANTE_BINARIO);
                }
            }
        }
        jProgressBar1.setValue(50);
        Collections.sort(array_dec,new FrequenzaComparator());//ordinamento crescente
        termina=false;
        while(array_dec.size()>=2 && !termina)
        {
            if(array_dec.size()==2)
            {
                Collections.sort(array_dec,new FrequenzaComparator());//ordinamento crescente
                NodoAlberoBinario sx = array_dec.get(0);
                NodoAlberoBinario dx = array_dec.get(1);
                NodoAlberoBinario n = new NodoAlberoBinario('^',(array_dec.get(0).getInf().getFrequenza()+array_dec.get(1).getInf().getFrequenza()));
                n.rootSI();
                n.setPsx(sx);
                n.setPdx(dx);
                array_dec.remove(array_dec.get(0));
                array_dec.remove(array_dec.get(0));
                array_dec.add(n);
                albero_dec.AggiungiNodo(n);
                Collections.sort(array_dec,new FrequenzaComparator());//ordinamento crescente
                //System.out.println(array_dec);
                termina=true;
            }
            else
            {
                char c='*';
                /*if(array.size()==4) c='@';
                else if(array.size()==3) c='#';*/
                Collections.sort(array_dec,new FrequenzaComparator());//ordinamento crescente
                NodoAlberoBinario sx = array_dec.get(0);
                NodoAlberoBinario dx = array_dec.get(1);
                NodoAlberoBinario n = new NodoAlberoBinario(c,(array_dec.get(0).getInf().getFrequenza()+array_dec.get(1).getInf().getFrequenza()));
                n.rootSI();
                n.setPsx(sx);
                n.setPdx(dx);
                array_dec.remove(array_dec.get(0));
                array_dec.remove(array_dec.get(0));
                array_dec.add(n);
                Collections.sort(array_dec,new FrequenzaComparator());//ordinamento crescente
                //System.out.println(array_dec);
            }
        }
        jProgressBar1.setValue(70);
        //System.out.println("Albero:");
        HashMap hm_dec_finale=new HashMap();
        albero_dec.visitaOA(albero_dec.getRoot(),null,null);
        hm_dec_finale.putAll(albero_dec.visitaHashMapDecompressione(albero_dec.getRoot()));
        
        try(FileWriter file_temporaneo_dec = new FileWriter(jLabel6.getText()+jLabel5.getText()+"_temp.!txt");FileReader file_dec = new FileReader(jLabel6.getText()+jLabel5.getText()+".txt");FileWriter file_decompresso = new FileWriter(jLabel6.getText()+jLabel5.getText()+".!txt"))
        {
            int x=file_dec.read();//carattere dal file di orgine della decompressione --> quindi dal file compresso
            int numero_max_di_8_bit=NUMERO_BYTE_DA_8_BIT;
            int numero_di_8_bit=0;
            while(x!=-1)
            {
                    String bin8bit=Integer.toBinaryString(x);
                    if(numero_di_8_bit<numero_max_di_8_bit) while(bin8bit.length()<8) bin8bit="0"+bin8bit;
                    else while(bin8bit.length()<CODICE_RESTANTE_BINARIO) bin8bit="0"+bin8bit;
                    numero_di_8_bit++;
                    //System.out.println(bin8bit);
                    file_temporaneo_dec.write(bin8bit);
                    //System.out.println(x + " ---- " + bin8bit);
                x=file_dec.read();
            }
            //FILE DECOMPRESSO TEMPORANEO (BINARIO) COMPLETATO
            file_temporaneo_dec.close();
            file_dec.close();
            jProgressBar1.setValue(80);
            try(FileReader file_temporaneo_reader_dec = new FileReader(jLabel6.getText()+jLabel5.getText()+"_temp.!txt"))
            {
                int i=file_temporaneo_reader_dec.read();
                //System.out.println((char)i);
                String stringa_binaria="";
                while(i!=-1)
                {
                    stringa_binaria+=""+(char)i;
                    if(hm_dec_finale.get(stringa_binaria)!=null)
                    {
                        //System.out.println(hm_dec_finale + "   " + stringa_binaria);
                        //System.out.println(stringa_binaria+" -> "+" -- "+ ((char)Integer.parseInt(stringa_binaria))+": "+hm_dec.get((char)Integer.parseInt(stringa_binaria)));
                        int carattere=Integer.parseInt(hm_dec_finale.get(stringa_binaria)+"");
                        //System.out.print((char)carattere);
                        if(carattere==13) file_decompresso.write("\n");
                        else file_decompresso.write(carattere);
                        stringa_binaria="";
                    }//else System.out.println((char)Integer.parseInt(stringa_binaria) + " -- " + Integer.parseInt(stringa_binaria) + " -- " + stringa_binaria);
                    i=file_temporaneo_reader_dec.read();
                }
            }
            jProgressBar1.setValue(90);
        }
        br_dec.close();
        
        jProgressBar1.setValue(100);
        //System.out.println("Decompressione riuscita!");
        jLabel9.setText("FILE DECOMPRESSO CORRETTAMENTE!\n - IL TUO FILE SI CHIAMA: \""+jTextField2.getText()+"_decompresso.txt"+"\"");
        
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        
        new File(jLabel6.getText()+jLabel5.getText()+".!txt").renameTo(new File(jLabel6.getText()+jTextField2.getText().replace("_compresso","")+"_decompresso.txt"));
        new File(jLabel6.getText()+jLabel5.getText()+"_temp.!txt").delete();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
